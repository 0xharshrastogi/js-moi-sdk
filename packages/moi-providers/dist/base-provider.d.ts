import { LogicManifest, Tesseract, Interaction } from "moi-utils";
import { EventType, Listener } from "../types/event";
import { AccountMetaInfo, AccountState, AssetInfo, ContextInfo, InteractionRequest, InteractionReceipt, InteractionResponse, Options, RpcResponse, TDU, Content, ContentFrom, Status, Inspect, Encoding, Registry } from "../types/jsonrpc";
import { AbstractProvider } from "./abstract-provider";
import Event from "./event";
export declare class BaseProvider extends AbstractProvider {
    _events: Event[];
    defaultOptions: Options;
    constructor();
    processResponse(response: RpcResponse): any;
    getBalance(address: string, assetId: string, options?: Options): Promise<number | bigint>;
    getContextInfo(address: string, options?: Options): Promise<ContextInfo>;
    getTDU(address: string, options?: Options): Promise<TDU>;
    getInteractionByHash(ixHash: string): Promise<Interaction>;
    getInteractionByTesseract(address: string, options?: Options, ix_index?: string): Promise<Interaction>;
    getInteractionCount(address: string, options?: Options): Promise<number | bigint>;
    getPendingInteractionCount(address: string): Promise<number | bigint>;
    getAccountState(address: string, options?: Options): Promise<AccountState>;
    getAccountMetaInfo(address: string): Promise<AccountMetaInfo>;
    getContentFrom(address: string): Promise<ContentFrom>;
    getWaitTime(address: string): Promise<number | bigint>;
    getTesseract(address: string, with_interactions: boolean, options?: Options): Promise<Tesseract>;
    getRegistry(address: string, options?: Options): Promise<Registry>;
    sendInteraction(ixObject: InteractionRequest): Promise<InteractionResponse>;
    getAssetInfoByAssetID(assetId: string): Promise<AssetInfo>;
    getInteractionReceipt(ixHash: string): Promise<InteractionReceipt>;
    getStorageAt(logicId: string, storageKey: string, options?: Options): Promise<string>;
    getLogicManifest(logicId: string, encoding: Encoding, options?: Options): Promise<string | LogicManifest.Manifest>;
    getContent(): Promise<Content>;
    getStatus(): Promise<Status>;
    getInspect(): Promise<Inspect>;
    getPeers(): Promise<string[]>;
    getDBEntry(key: string): Promise<string>;
    getAccounts(): Promise<string[]>;
    waitForInteraction(interactionHash: string, timeout?: number): Promise<InteractionReceipt>;
    waitForResult(interactionHash: string, timeout?: number): Promise<any>;
    execute(method: string, params: any): Promise<any>;
    _startEvent(event: Event): void;
    _stopEvent(event: Event): void;
    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this;
    on(eventName: EventType, listener: Listener): this;
    once(eventName: EventType, listener: Listener): this;
    emit(eventName: EventType, ...args: Array<any>): boolean;
    listenerCount(eventName?: EventType): number;
    listeners(eventName?: EventType): Array<Listener>;
    off(eventName: EventType, listener?: Listener): this;
    removeAllListeners(eventName?: EventType): this;
}
